{"id":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","dependencies":[{"name":"/Users/kehlinswain/Documents/heroku_projects/newPoseNet/posenet/demos/package.json","includedInParent":true,"mtime":1562268805074},{"name":"/Users/kehlinswain/Documents/heroku_projects/newPoseNet/posenet/demos/.babelrc","includedInParent":true,"mtime":1562268805023},{"name":"/Users/kehlinswain/Documents/heroku_projects/newPoseNet/posenet/demos/node_modules/@tensorflow-models/posenet/package.json","includedInParent":true,"mtime":1562269924133},{"name":"@tensorflow/tfjs-core","loc":{"line":3,"column":17},"parent":"/Users/kehlinswain/Documents/heroku_projects/newPoseNet/posenet/demos/node_modules/@tensorflow-models/posenet/dist/mobilenet.js","resolved":"/Users/kehlinswain/Documents/heroku_projects/newPoseNet/posenet/demos/node_modules/@tensorflow/tfjs-core/dist/tf-core.esm.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tf = require(\"@tensorflow/tfjs-core\");\nvar VALID_OUTPUT_STRIDES = [8, 16, 32];\nfunction assertValidOutputStride(outputStride) {\n    tf.util.assert(typeof outputStride === 'number', function () { return 'outputStride is not a number'; });\n    tf.util.assert(VALID_OUTPUT_STRIDES.indexOf(outputStride) >= 0, function () { return \"outputStride of \" + outputStride + \" is invalid. \" +\n        \"It must be either 8, 16, or 32\"; });\n}\nexports.assertValidOutputStride = assertValidOutputStride;\nfunction assertValidResolution(resolution, outputStride) {\n    tf.util.assert(typeof resolution === 'number', function () { return 'resolution is not a number'; });\n    tf.util.assert((resolution - 1) % outputStride === 0, function () { return \"resolution of \" + resolution + \" is invalid for output stride \" +\n        (outputStride + \".\"); });\n}\nexports.assertValidResolution = assertValidResolution;\nfunction toFloatIfInt(input) {\n    return tf.tidy(function () {\n        if (input.dtype === 'int32')\n            input = input.toFloat();\n        input = tf.div(input, 127.5);\n        return tf.sub(input, 1.0);\n    });\n}\nvar MobileNet = (function () {\n    function MobileNet(model, outputStride) {\n        this.model = model;\n        var inputShape = this.model.inputs[0].shape;\n        tf.util.assert((inputShape[1] === -1) && (inputShape[2] === -1), function () { return \"Input shape [\" + inputShape[1] + \", \" + inputShape[2] + \"] \" +\n            \"must both be -1\"; });\n        this.outputStride = outputStride;\n    }\n    MobileNet.prototype.predict = function (input) {\n        var _this = this;\n        return tf.tidy(function () {\n            var asFloat = toFloatIfInt(input);\n            var asBatch = asFloat.expandDims(0);\n            var _a = _this.model.predict(asBatch), offsets4d = _a[0], heatmaps4d = _a[1], displacementFwd4d = _a[2], displacementBwd4d = _a[3];\n            var heatmaps = heatmaps4d.squeeze();\n            var heatmapScores = heatmaps.sigmoid();\n            var offsets = offsets4d.squeeze();\n            var displacementFwd = displacementFwd4d.squeeze();\n            var displacementBwd = displacementBwd4d.squeeze();\n            return {\n                heatmapScores: heatmapScores, offsets: offsets,\n                displacementFwd: displacementFwd,\n                displacementBwd: displacementBwd\n            };\n        });\n    };\n    MobileNet.prototype.dispose = function () {\n        this.model.dispose();\n    };\n    return MobileNet;\n}());\nexports.MobileNet = MobileNet;\n","map":{"mappings":[{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/mobilenet.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}}],"sources":{"node_modules/@tensorflow-models/posenet/dist/mobilenet.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tf = require(\"@tensorflow/tfjs-core\");\nvar VALID_OUTPUT_STRIDES = [8, 16, 32];\nfunction assertValidOutputStride(outputStride) {\n    tf.util.assert(typeof outputStride === 'number', function () { return 'outputStride is not a number'; });\n    tf.util.assert(VALID_OUTPUT_STRIDES.indexOf(outputStride) >= 0, function () { return \"outputStride of \" + outputStride + \" is invalid. \" +\n        \"It must be either 8, 16, or 32\"; });\n}\nexports.assertValidOutputStride = assertValidOutputStride;\nfunction assertValidResolution(resolution, outputStride) {\n    tf.util.assert(typeof resolution === 'number', function () { return 'resolution is not a number'; });\n    tf.util.assert((resolution - 1) % outputStride === 0, function () { return \"resolution of \" + resolution + \" is invalid for output stride \" +\n        (outputStride + \".\"); });\n}\nexports.assertValidResolution = assertValidResolution;\nfunction toFloatIfInt(input) {\n    return tf.tidy(function () {\n        if (input.dtype === 'int32')\n            input = input.toFloat();\n        input = tf.div(input, 127.5);\n        return tf.sub(input, 1.0);\n    });\n}\nvar MobileNet = (function () {\n    function MobileNet(model, outputStride) {\n        this.model = model;\n        var inputShape = this.model.inputs[0].shape;\n        tf.util.assert((inputShape[1] === -1) && (inputShape[2] === -1), function () { return \"Input shape [\" + inputShape[1] + \", \" + inputShape[2] + \"] \" +\n            \"must both be -1\"; });\n        this.outputStride = outputStride;\n    }\n    MobileNet.prototype.predict = function (input) {\n        var _this = this;\n        return tf.tidy(function () {\n            var asFloat = toFloatIfInt(input);\n            var asBatch = asFloat.expandDims(0);\n            var _a = _this.model.predict(asBatch), offsets4d = _a[0], heatmaps4d = _a[1], displacementFwd4d = _a[2], displacementBwd4d = _a[3];\n            var heatmaps = heatmaps4d.squeeze();\n            var heatmapScores = heatmaps.sigmoid();\n            var offsets = offsets4d.squeeze();\n            var displacementFwd = displacementFwd4d.squeeze();\n            var displacementBwd = displacementBwd4d.squeeze();\n            return {\n                heatmapScores: heatmapScores, offsets: offsets,\n                displacementFwd: displacementFwd,\n                displacementBwd: displacementBwd\n            };\n        });\n    };\n    MobileNet.prototype.dispose = function () {\n        this.model.dispose();\n    };\n    return MobileNet;\n}());\nexports.MobileNet = MobileNet;\n"},"lineCount":57}},"hash":"97a6ef1c9c3e42b1dd7e34d66d225b18","cacheData":{"env":{}}}